from transformers import pipeline

unmasker = pipeline('fill-mask', model='bert-base-uncased')

print(unmasker("Hello I'm a [MASK] model."))

def unmask(s):
	ret_val = unmasker(s)
	return ret_val[0]['token_str']

class Pattern:
	def __init__(self, phrases, mask_index):
		self.phrases = phrases
		self.mask_index = mask_index

	def resolve(self):
		ret_val = ''
		masked = False
		for i in range(0, len(self.phrases) + 1):
			if i == self.mask_index:
				masked = True
				ret_val += '[MASK]'
			else:
				j = i
				if masked:
					j = i - 1
				
				ret_val += self.phrases[j]
		return ret_val

class Verbalizer:
	def __init__(self, labels):
		# [{ sentiment: String, values: [String] }]
		self.labels = labels

	def get_label(self, v):
		for l in self.labels:
			if v in l.values:
				return l.sentiment


class Task:
	def __init__(self, pattern, verbalizer):
		self.pattern = pattern
		self.verbalizer = verbalizer

	def run(self):
		p = self.pattern.resolve()
		model_ret = unmask(p)
		label = self.verbalizer.get_label(model_ret)